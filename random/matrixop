tranvers is diffrent from traverse and also find solution for matrix[][] = {{0,0},{0,0}}  at this condition 


Matrix Operations 
Easy Accuracy: 77.95% Submissions: 4477 Points: 2
Given a binary matrix of dimensions M * N. One can perform the given operation in the matrix.

If the value of matrix[i][j] is 0, then traverse in the same direction and check the next value.
If the value of matrix[i][j] is 1, then update matrix[i][j] to 0 and change the current direction from up, right, down, or left to the directions right, down, left, and up respectively.
Initially you start from cell(0, 0), moving in right direction.

The task is to find the first cell of the matrix  which leads to outside the matrix from the traversal of the given matrix from the cell (0, 0) by performing the operations.

Example 1:

Input:
matrix[][] = {{0,1},
              {1,0}}

Output: (1,1)
Explanation:




Example 2:

Input: 
matrix[][] = {{0, 1, 1, 1, 0},
                   {1, 0, 1, 0, 1},
              {1, 1, 1, 0, 0}}

Output: (2,0)
Your Task:
You don't need to read input or print anything. Complete the function endPoints() that take the matrix as input parameter and output the last cell before the pointer gets outside of the matrix.

Constrains:
1<= M, N <=1000
0<= matrix[i][j] <=1














// { Driver Code Starts
//Initial Template for C++

#include<bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
//User function Template for C++

class Solution{
    public:
    pair<int,int> endPoints(vector<vector<int>> matrix){
        int m=matrix.size();
       int n=matrix[0].size();
       int i=0;
       int j=0;
       char k='r';
       int ans1=i,ans2=j;
        
       while( i>=0 && j>=0 && i<m && j<n)
       {
           
           if(matrix[i][j]==0)
           {
              ans1=i;
              ans2=j;
              if(k=='r')
              j++;
              else if(k=='l')
              j--;
              else if(k=='u')
              i--;
              else if(k=='d')
              i++;
           }
           else
           {   ans1=i;
               ans2=j;
               if(k=='r')
               {
                   matrix[i][j]=0;
                   k='d';
                   i++;
               }
               else if(k=='u')
               {
                   matrix[i][j]=0;
                   k='r';
                   j++;
               }
              else if(k=='d')
               {
                   matrix[i][j]=0;
                   k='l';
                   j--;
               }
               else if(k=='l')
               {
                   matrix[i][j]=0;
                   k='u';
                   i--;
               }
           }
       }
       pair<int,int> p;
       p.first = ans1;
       p.second = ans2;
       return p;
        //code here
        
    }

};

// { Driver Code Starts.


int main()
{
    int tc;
	scanf("%d", &tc);
	while(tc--){
		int row, col;
		scanf("%d", &row);
		scanf("%d", &col);
		vector<vector<int>> matrix(row , vector<int> (col));
	 
		for(int i = 0; i < row; i++){
			for(int j = 0; j < col; j++){
			    cin>>matrix[i][j];
			}
		}
		Solution obj;
		pair<int,int> p = obj.endPoints(matrix);
		
		cout << "(" << p.first << ", " << p.second << ")" << endl;
	}
	return 0;
}  // } Driver Code Ends
